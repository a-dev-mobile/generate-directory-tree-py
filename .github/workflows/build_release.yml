name: Build and Release Executables

on:
  push:
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller gitpython python-gitlab

    - name: Build executable
      run: |
        pyinstaller --onefile scripts/main.py

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-executable
        path: dist/

    - name: Create GitHub Release (only once)
      if: ${{ matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/') }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset (Ubuntu)
      if: ${{ matrix.os == 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/main
        asset_name: main-ubuntu-latest
        asset_content_type: application/octet-stream

    - name: Get release info (for macOS and Windows)
      if: ${{ matrix.os != 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/') }}
      id: get_release
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        script: |
          const release = await github.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: '${{ github.ref }}'
          });
          return release.data.upload_url;

    - name: Upload Release Asset (macOS and Windows)
      if: ${{ matrix.os != 'ubuntu-latest' && startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.result }}
        asset_path: dist/main
        asset_name: main-${{ matrix.os }}
        asset_content_type: application/octet-stream
